<pre class='metadata'>
Status: CG-DRAFT
Title: Scroll To Text Fragment
ED: wicg.github.io/ScrollToTextFragment/draftspec.html
Shortname: scroll-to-text
Level: 1
Editor: Nick Burris, Google https://www.google.com, nburris@chromium.org
Editor: David Bokan, Google https://www.google.com, bokan@chromium.org
Abstract: Scroll To Text adds support for specifying a text snippet in the URL
fragment. When navigating to a URL with such a fragment, the browser will find
the first instance of the text snippet and scroll it into view.
Group: wicg
Repository: wicg/ScrollToTextFragment
</pre>

# Introduction # {#introduction}
TODO

## Use cases ## {#use-cases}

### Web text references ### {#web-text-references}
The core use case for scroll to text is to allow URLs to serve as an exact text
reference across the web. For example, Wikipedia references could link to the
exact text they are quoting from a page. Similarly, search engines can serve
URLs that direct the user to the answer they are looking for in the page rather
than linking to the top of the page.

### User sharing ### {#user-sharing}
With scroll to text, browsers may implement an option to 'Copy URL to here'
when the user highlights and opens the context menu on some text. The browser
can then generate a URL with the target text appropriately specified, and the
recipient of the URL will have the text scrolled into view and highlighted.
Without scroll to text, if a user wants to share a passage of text from a page,
they would likely just copy and paste the passage, in which case the receiver
loses the context of the page.

# Description # {#description}

## Syntax ## {#syntax}
A text fragment is specified in the fragment directive (see
[[#fragment-directive]]) with the following format:
<pre>
##targetText=[prefix-,]textStart[,textEnd][,-suffix]
              context  |-------match-----|  context
</pre>
<em>(Square brackets indicate an optional parameter)</em>

The text parameters are percent-decoded before matching. Dash (-), ampersand
(&), and comma (,) characters in text parameters must be percent-encoded to
avoid being interpreted as part of the targetText syntax.

The only required parameter is textStart. If only textStart is specified, the
first instance of this exact text string is the target text.

<div class="example">
<code>##targetText=an%20example%20text%20fragment</code> indicates that the
exact text "an example text fragment" is the target text.
</div>

If the textEnd parameter is also specified, then the target text refers to a
range of text in the page. The target text range is the text range starting at
the first instance of startText, until the first instance of endText that
appears after startText. This is equivalent to specifying the entire text range
in the startText parameter, but allows the URL to avoid being bloated with a
long target text.

<div class="example">
<code>##targetText=an%20example,text%20fragment</code> indicates that the first
instance of "an example" until the following first instance of "text fragment"
is the target text.
</div>

### Context Terms ### {#context-terms}

The other two optional parameters are context terms. They are specified by the
dash (-) character succeeding the prefix and preceding the suffix, to
differentiate them from the textStart and textEnd parameters, as any
combination of optional parameters may be specified.

Context terms are used to disambiguate the target text fragment. The context
terms can specify the text immediately before (prefix) and immediately after
(suffix) the text fragment, allowing for whitespace.

<div class="note">
While the context terms must be the immediate text surrounding the target text
fragment, any amount of whitespace is allowed between context terms and the
text fragment. This helps allow context terms to be across element boundaries,
for example if the target text fragment is at the beginning of a paragraph and
it must be disambiguated by the previous element's text as a prefix.
</div>

The context terms are not part of the target text fragment and should not be
highlighted or affect the scroll position.

<div class="example">
<code>##targetText=this%20is-,an%20example,-text%20fragment</code> would match
to "an example" in "this is an example text fragment", but not match to "an
example" in "here is an example text".
</div>

## The Fragment Directive ## {#fragment-directive}
To avoid compatibility issues with usage of existing URL fragments, this spec
introduces the <em>fragment directive</em>. The fragment directive is a portion
of the URL fragment delimited by the double-hash "##". It is reserved for UA
instructions, such as targetText, and is stripped from the URL during loading
so that author scripts can't directly interact with it.

The fragment-directive is a mechanism for URLs to specify instructions meant
for the UA rather than the document. It's meant to avoid direct interaction with
author script so that future UA instructions can be added without fear
introducing breaking changes to existing content. Potential examples could be:
translation-hints or enabling accessibility features.

### Parsing the fragment directive

To the definition of a <a href="https://url.spec.whatwg.org/#concept-url">
URL record</a>, add:

<em>
A URL's fragment-directive is either null or an ASCII string holding data used
by the UA to process the resource. It is initially null
</em>

Amend the <a href="https://url.spec.whatwg.org/#concept-basic-url-parser">
basic URL parser</a> steps to parse fragment directives in a URL:

  - In step 11 of this algorithm, amend the <em>fragment state</em> case:
    - In the inner switch on <em>c</em>, add a step after step 2:
        - If <em>c</em> is U+0023 (#) and <em>remaining</em> begins with U+0023
          (#), set state to <em>fragment-directive state</em>. Increment <em>c</em>
          by the length of the fragment-directive delimiter minus 1. <div class="note">
          This means we require three hash characters in the URL since one
          hash is used to get into the fragment state step. This is
          foreshadowing a change to the delimiter string. Were we to keep the
          double-hash we'd want to make an exception for the case where there
          is no fragment. </div>
    - Step 3 (now step 4 after the above change) must begin with "Otherwise,"
  - In step 11 of this algorithm, add a new <em>fragment-directive state</em>
    case with the following steps:
    
    <em>fragment-directive state</em>:
    - Switching on <em>c</em>:
        - The EOF code point: Do nothing
        - U+0000 NULL: Validation error
        - Otherwise:
          1. If <em>c</em> is not a URL code point and not U+0025 (%), validation
             error.
          2. If <em>c</em> is U+0025 (%) and <em>remaining</em> does not start with
             two ASCII hex digits, validation error.
          3. UTF-8 percent encode <em>c</em> using the fragment percent-encode set
             and append the result to <em>urlâ€™s fragment-directive</em>.

<div class="note">
  These changes make a URL's fragment end at the fragment directive delimiter.
  The fragment-directive includes all characters that follow, but not including,
  the delimiter.
</div>

<div class="example">
<code>https://example.org/#test##targetText=foo</code> will be parsed such that
the fragment is the string "test" and the fragment-directive is the string
"targetText=foo".
</div>

### Processing the fragment directive

To the definition of
<a href="https://dom.spec.whatwg.org/#concept-document-type">Document</a>, add:

<em>
Each document has an associated fragment directive.
</em>

Amend the
<a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#initialise-the-document-object">
create and initialize a Document object</a> steps to store and remove the
fragment directive from the a Document's URL.

Replace steps 7 and 8 of this algorithm with:

7. Let <em>url</em> be null
8. If <em>request</em> is non-null, then set <em>url</em> to <em>request's
   current URL</em>.
9. Otherwise, set <em>url</em> to <em>response's URL</em>.
10. Set <em>document's fragment-directive</em> be <em>url's
    fragment-directive</em>.  (Note: this is stored on the document but not
    web-exposed)
11. Set <em>url's fragment-directive</em> to null.
12. Set the <em>document's url</em> to be <em>url</em>.

## Navigating to a Text Fragment ## {#navigating-to-text-fragment}
<div class="note">
The scroll to text specification proposes an amendment to
[[html#scroll-to-fragid]]. In summary, if a targetText fragment directive is
present and a match is found in the page, the text fragment takes precedent
over the element fragment as the indicated part of the document.
</div>

Add the following steps to the beginning of the processing model for <a
href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#the-indicated-part-of-the-document">The
indicated part of the document</a>.

1. Let <em>fragment directive</em> be the document URL's
<a href="#fragment-directive">fragment directive</a>. 
2. If [[#find-a-target-text]] with <em>fragment directive</em> returns
non-null, then the return value is the indicated part of the document; return.

### Find a target text ### {#find-a-target-text}

To find the target text for a given string <em>fragment directive</em>, the
user agent must run these steps:
1. If <em>fragment directive</em> does not begin with the string "targetText=",
    then return null.
2. Let <em>raw target text</em> be the substring of <em>fragment directive</em> starting at index 11.
    <div class="note">
    This is the remainder of the fragment directive following, but not including, the "targetText=" prefix.
    </div>
3. If <em>raw target text</em> is the empty string, return null.
4. Let <em>tokens</em> be a list of strings that is the result of splitting the
    string <em>raw target text</em> on commas.
5. If <em>tokens</em> has size 1, then:
    1. Let <em>target text</em> be <em>tokens[0]</em>.
    2. Let <em>text match</em> be the range of text that is the first instance
        of <em>target text</em> in the DOM tree.
    3. Return <em>text match</em>
6. Let <em>prefix</em> and <em>suffix</em> and <em>textEnd</em> be the empty string.
    <div class="note">
    prefix, suffix, and textEnd are the optional parameters of targetText.
    </div>
7. Let <em>potential prefix</em> be the first item of <em>tokens</em>.
8. If the last character of <em>potential prefix</em> is U+002D (-), then:
    1. Let <em>prefix</em> be the result of removing any U+002D (-) from <em>potential prefix</em>.
    2. Remove the first item of the list <em>tokens</em>.
9. Let <em>potential suffix</em> be the last item of <em>tokens</em>.
10. If the first character of <em>potential suffix</em> is U+002D (-), then:
    1. Let <em>suffix</em> be the result of removing any U+002D (-) from <em>potential suffix</em>.
    2. Remove the last item of the list <em>tokens</em>.
11. Assert: <em>tokens</em> has size 1 or <em>tokens</em> has size 2.
    <div class="note">
    Once the prefix and suffix are removed from tokens, tokens may either
    contain one item (textStart) or two items (textStart and textEnd).
    </div>
12. Let <em>textStart</em> be the first item of <em>tokens</em>.
13. If <em>tokens</em> has size 2, then let <em>textEnd</em> be the last item of <em>tokens</em>.
    <div class="note">
    The strings prefix, textStart, textEnd, and suffix now contain the
    targetText parameters as defined in [[#syntax]].
    </div>
14. If textEnd is the empty string, then:
    1. For each instance of <em>textStart</em> in the DOM tree:
        1. If <em>prefix</em> is not the empty string and <em>prefix</em> is
            not the text immediately preceding this instance of <em>textStart</em>
            in the DOM tree, then continue.
        2. If <em>suffix</em> is not the empty string and <em>suffix</em> is
            not the text immediately following this instance of <em>textStart</em>
            in the DOM tree, then continue.
        3. Return this instance of <em>textStart</em> as the indicated part of the document.
    2. Return null.
15. For each instance of <em>textStart</em> in the DOM tree:
    1. If <em>prefix</em> is not the empty string and <em>prefix</em> is not
        the text immediately preceding this instance of <em>textStart</em> in the
        DOM tree, then continue.
    2. For each instance of <em>textEnd</em> in the DOM tree, starting from this instance of <em>textStart</em>:
        1. If <em>suffix</em> is not the empty string and <em>suffix</em> is
            not the text immediately following this instance of <em>textEnd</em> in
            the DOM tree, then continue.
        2. Let <em>match</em> be the range of text from this instance of
            <em>textStart</em> to this instance of <em>textEnd</em>.
        3. Return match.
    3. Return null.
16. Return null.
